// HRM Application Prisma Schema
// This schema defines the database models for our Human Resource Management system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String?   @unique
  name          String
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(EMPLOYEE)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  employee      Employee?
  accounts      Account[]
  sessions      Session[]
  leaveRequests LeaveRequest[]
  onboardingReviews OnboardingReview[]
  updateRequests OnboardingUpdateRequest[]
  updateRequestReviews OnboardingUpdateRequest[] @relation("UpdateRequestReviewer")
  createdOnboardings OnboardingSubmission[] @relation("OnboardingCreatedBy")
  reviewedSteps OnboardingStep[] @relation("OnboardingStepReviewer")
  regularizedAttendances Attendance[] @relation("AttendanceRegularizer")
  attendanceRegularizationReviews AttendanceRegularizationRequest[] @relation("AttendanceRegularizationReviewer")
  payrollInputApprovals PayrollInput[] @relation("PayrollInputApprover")
  payrollInputProcessings PayrollInput[] @relation("PayrollInputProcessor")
  variablePaySubmissions VariablePayEntry[] @relation("VariablePaySubmitter")
  variablePayApprovals VariablePayEntry[] @relation("VariablePayApprover")
  variablePayRejections VariablePayEntry[] @relation("VariablePayRejector")
  payslipGenerations Payslip[] @relation("PayslipGenerator")
  correctionRequests PayrollCorrectionRequest[] @relation("CorrectionRequester")
  correctionReviews PayrollCorrectionRequest[] @relation("CorrectionReviewer")
  payrollAuditLogs PayrollAuditLog[] @relation("PayrollAuditPerformer")
  goalUpdates GoalUpdate[]
  performanceReviews PerformanceReview[] @relation("PerformanceReviewer")
  reviewCycles ReviewCycle[] @relation("ReviewCycleCreator")
  assignedRequests EmployeeRequest[] @relation("RequestAssignee")
  requestComments RequestComment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Employee Management Models
model Employee {
  id            String     @id @default(cuid())
  userId        String     @unique
  employeeId    String     @unique // Custom employee ID
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  phoneNumber   String?
  address       String?
  emergencyContact String?
  emergencyPhone   String?
  departmentId  String
  position      String
  hireDate      DateTime
  salary        Decimal    @db.Decimal(10, 2)
  metadata      Json?      // Store comprehensive onboarding data
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department    Department @relation(fields: [departmentId], references: [id])
  leaveRequests LeaveRequest[]
  attendance    Attendance[]
  attendanceRegularizationRequests AttendanceRegularizationRequest[]
  payroll       Payroll[]
  payrollInputs PayrollInput[]
  variablePayEntries VariablePayEntry[]
  payslips      Payslip[]
  payrollCorrectionRequests PayrollCorrectionRequest[]
  payrollAuditLogs PayrollAuditLog[]
  onboardingSubmission OnboardingSubmission?
  performanceGoals PerformanceGoal[]
  performanceReviews PerformanceReview[]
  employeeRequests EmployeeRequest[]

  @@map("employees")
}

model Department {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  employees   Employee[]
  onboardingSubmissions OnboardingSubmission[]

  @@map("departments")
}

// Attendance and Leave Management
model Attendance {
  id              String           @id @default(cuid())
  employeeId      String
  date            DateTime
  checkIn         DateTime?
  checkOut        DateTime?
  checkInLocation Json?            // Store location data for check-in
  checkOutLocation Json?           // Store location data for check-out
  status          AttendanceStatus @default(PRESENT)
  notes           String?
  isRegularized   Boolean          @default(false)
  regularizedBy   String?
  regularizedAt   DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  employee        Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  regularizer     User?            @relation("AttendanceRegularizer", fields: [regularizedBy], references: [id])

  @@unique([employeeId, date])
  @@map("attendance")
}

model AttendanceRegularizationRequest {
  id          String                           @id @default(cuid())
  employeeId  String
  date        DateTime
  reason      String
  status      AttendanceRegularizationStatus   @default(PENDING)
  requestedAt DateTime                         @default(now())
  reviewedBy  String?
  reviewedAt  DateTime?
  reviewComments String?
  createdAt   DateTime                         @default(now())
  updatedAt   DateTime                         @updatedAt

  // Relations
  employee    Employee                         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer    User?                            @relation("AttendanceRegularizationReviewer", fields: [reviewedBy], references: [id])

  @@unique([employeeId, date])
  @@map("attendance_regularization_requests")
}

model LeaveRequest {
  id          String        @id @default(cuid())
  employeeId  String
  leaveType   LeaveType
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      LeaveStatus   @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  comments    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  employee    Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  approver    User?         @relation(fields: [approvedBy], references: [id])

  @@map("leave_requests")
}

// Payroll Management
model Payroll {
  id              String      @id @default(cuid())
  employeeId      String
  month           Int
  year            Int
  basicSalary     Decimal     @db.Decimal(10, 2)
  allowances      Decimal     @db.Decimal(10, 2) @default(0)
  deductions      Decimal     @db.Decimal(10, 2) @default(0)
  netSalary       Decimal     @db.Decimal(10, 2)
  status          PayrollStatus @default(PENDING)
  paidAt          DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  employee        Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payrollInputs   PayrollInput[]
  payslips        Payslip[]
  correctionRequests PayrollCorrectionRequest[]
  auditLogs       PayrollAuditLog[]

  @@unique([employeeId, month, year])
  @@map("payroll")
}

// Payroll Inputs - Detailed breakdown of earnings and deductions
model PayrollInput {
  id              String      @id @default(cuid())
  payrollId       String
  employeeId      String
  month           Int
  year            Int
  
  // Earnings
  basicSalary     Decimal     @db.Decimal(10, 2)
  hra             Decimal     @db.Decimal(10, 2) @default(0)
  variablePay     Decimal     @db.Decimal(10, 2) @default(0)
  overtime        Decimal     @db.Decimal(10, 2) @default(0)
  bonus           Decimal     @db.Decimal(10, 2) @default(0)
  allowances      Decimal     @db.Decimal(10, 2) @default(0)
  totalEarnings   Decimal     @db.Decimal(10, 2)
  
  // Deductions
  pf              Decimal     @db.Decimal(10, 2) @default(0)
  esi             Decimal     @db.Decimal(10, 2) @default(0)
  tax             Decimal     @db.Decimal(10, 2) @default(0)
  insurance       Decimal     @db.Decimal(10, 2) @default(0)
  leaveDeduction  Decimal     @db.Decimal(10, 2) @default(0)
  otherDeductions Decimal     @db.Decimal(10, 2) @default(0)
  totalDeductions Decimal     @db.Decimal(10, 2)
  
  // Attendance data
  workingDays     Int         @default(0)
  presentDays     Int         @default(0)
  leaveDays       Int         @default(0)
  
  // Status and approval
  status          PayrollInputStatus @default(DRAFT)
  approvedBy      String?
  approvedAt      DateTime?
  processedBy     String?
  processedAt     DateTime?
  
  // Metadata
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  payroll         Payroll     @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  employee        Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  approver        User?       @relation("PayrollInputApprover", fields: [approvedBy], references: [id])
  processor       User?       @relation("PayrollInputProcessor", fields: [processedBy], references: [id])

  @@unique([employeeId, month, year])
  @@map("payroll_inputs")
}

// Variable Pay Entries
model VariablePayEntry {
  id              String      @id @default(cuid())
  employeeId      String
  month           Int
  year            Int
  amount          Decimal     @db.Decimal(10, 2)
  type            VariablePayType
  description     String
  status          VariablePayStatus @default(PENDING)
  submittedBy     String
  approvedBy      String?
  approvedAt      DateTime?
  rejectedBy      String?
  rejectedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  employee        Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  submitter       User        @relation("VariablePaySubmitter", fields: [submittedBy], references: [id])
  approver        User?       @relation("VariablePayApprover", fields: [approvedBy], references: [id])
  rejector        User?       @relation("VariablePayRejector", fields: [rejectedBy], references: [id])

  @@map("variable_pay_entries")
}

// Payslips
model Payslip {
  id              String      @id @default(cuid())
  payrollId       String
  employeeId      String
  month           Int
  year            Int
  fileName        String
  filePath        String
  fileSize        Int
  generatedAt     DateTime    @default(now())
  generatedBy     String
  status          PayslipStatus @default(GENERATED)
  downloadedAt    DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  payroll         Payroll     @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  employee        Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  generator       User        @relation("PayslipGenerator", fields: [generatedBy], references: [id])

  @@unique([employeeId, month, year])
  @@map("payslips")
}

// Payroll Correction Requests
model PayrollCorrectionRequest {
  id              String      @id @default(cuid())
  employeeId      String
  payrollId       String
  month           Int
  year            Int
  type            CorrectionType
  description     String
  requestedAmount Decimal?    @db.Decimal(10, 2)
  status          CorrectionStatus @default(PENDING)
  requestedBy     String
  reviewedBy      String?
  reviewedAt      DateTime?
  reviewComments  String?
  resolution      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  employee        Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payroll         Payroll     @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  requester       User        @relation("CorrectionRequester", fields: [requestedBy], references: [id])
  reviewer        User?       @relation("CorrectionReviewer", fields: [reviewedBy], references: [id])

  @@map("payroll_correction_requests")
}

// Payroll Audit Trail
model PayrollAuditLog {
  id              String      @id @default(cuid())
  payrollId       String?
  employeeId      String?
  action          String
  details         Json
  performedBy     String
  performedAt     DateTime    @default(now())
  ipAddress       String?
  userAgent       String?

  // Relations
  payroll         Payroll?    @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  employee        Employee?   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  performer       User        @relation("PayrollAuditPerformer", fields: [performedBy], references: [id])

  @@map("payroll_audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  HOLIDAY
}

enum AttendanceRegularizationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeaveType {
  SICK_LEAVE
  VACATION
  PERSONAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  EMERGENCY_LEAVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
  FINALIZED
}

enum PayrollInputStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  PROCESSED
  REJECTED
}

enum VariablePayType {
  PERFORMANCE_BONUS
  COMMISSION
  OVERTIME
  INCENTIVE
  ARREARS
  RETROACTIVE
  OTHER
}

enum VariablePayStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PayslipStatus {
  GENERATED
  DOWNLOADED
  ARCHIVED
}

enum CorrectionType {
  SALARY_DISPUTE
  ATTENDANCE_DISPUTE
  DEDUCTION_ERROR
  ALLOWANCE_MISSING
  OTHER
}

enum CorrectionStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  RESOLVED
}

// Onboarding Workflow Models
model OnboardingSubmission {
  id                    String                    @id @default(cuid())
  
  // Employee credentials (created by Admin/HR)
  email                 String                    @unique
  username              String                    @unique
  password              String                    // Hashed password
  employeeId            String?                   @unique
  
  // Company-specific data (filled by Admin/HR)
  departmentId          String?
  position              String?
  employmentType        EmploymentType?
  dateOfJoining         DateTime?
  salary                Decimal?                  @db.Decimal(10, 2)
  payFrequency          PayFrequency?
  pfNumber              String?
  esicNumber            String?
  
  // Overall status
  status                OnboardingStatus          @default(CREATED)
  createdBy             String                    // Admin/HR who created the onboarding
  createdAt             DateTime                  @default(now())
  completedAt           DateTime?
  
  // Relations
  department            Department?               @relation(fields: [departmentId], references: [id])
  createdByUser         User                      @relation("OnboardingCreatedBy", fields: [createdBy], references: [id])
  steps                 OnboardingStep[]
  reviews               OnboardingReview[]
  updateRequests        OnboardingUpdateRequest[]
  employee              Employee?                 @relation(fields: [employeeId], references: [employeeId])
  
  updatedAt             DateTime                  @updatedAt

  @@map("onboarding_submissions")
}

model OnboardingStep {
  id                    String                    @id @default(cuid())
  submissionId          String
  stepType              OnboardingStepType
  stepData              Json?                     // Store step-specific data as JSON
  status                OnboardingStepStatus      @default(PENDING)
  submittedAt           DateTime?
  reviewedAt            DateTime?
  reviewedBy            String?
  reviewComments        String?
  rejectionReason       String?
  
  // Relations
  submission            OnboardingSubmission      @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  reviewer              User?                     @relation("OnboardingStepReviewer", fields: [reviewedBy], references: [id])
  
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  @@map("onboarding_steps")
}

model OnboardingReview {
  id                    String                    @id @default(cuid())
  submissionId          String
  reviewedBy            String
  reviewType            ReviewType
  comments              String?
  changesRequested      Json?                     // Store field changes as JSON
  status                ReviewStatus              @default(PENDING)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  submission            OnboardingSubmission      @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  reviewer              User                      @relation(fields: [reviewedBy], references: [id])

  @@map("onboarding_reviews")
}

model OnboardingUpdateRequest {
  id                    String                    @id @default(cuid())
  submissionId          String
  requestedBy           String
  requestType           UpdateRequestType
  fieldName             String
  oldValue              String?
  newValue              String
  reason                String
  status                UpdateRequestStatus       @default(PENDING)
  reviewedBy            String?
  reviewComments        String?
  reviewedAt            DateTime?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  submission            OnboardingSubmission      @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  requester             User                      @relation(fields: [requestedBy], references: [id])
  reviewer              User?                     @relation("UpdateRequestReviewer", fields: [reviewedBy], references: [id])

  @@map("onboarding_update_requests")
}

// Enums for Onboarding Workflow
enum OnboardingStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum OnboardingStepType {
  PERSONAL_INFORMATION
  DOCUMENTS
  PREVIOUS_EMPLOYMENT
  BANKING_DETAILS
  BACKGROUND_VERIFICATION
}

enum OnboardingStepStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum ReviewType {
  INITIAL_REVIEW
  BACKGROUND_VERIFICATION
  FINAL_APPROVAL
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum UpdateRequestType {
  EMPLOYEE_REQUEST
  ADMIN_EDIT
}

enum UpdateRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BackgroundVerificationStatus {
  PENDING
  IN_PROGRESS
  CLEARED
  FAILED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum PayFrequency {
  MONTHLY
  WEEKLY
  BIWEEKLY
  ANNUAL
}

// Performance Management Models
model PerformanceGoal {
  id              String            @id @default(cuid())
  employeeId      String
  title           String
  description     String
  target          String
  category        GoalCategory
  priority        GoalPriority      @default(MEDIUM)
  status          GoalStatus        @default(ACTIVE)
  startDate       DateTime
  endDate         DateTime
  progress        Int               @default(0) // 0-100 percentage
  completionDate  DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  employee        Employee          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  reviews         PerformanceReview[]
  updates         GoalUpdate[]

  @@map("performance_goals")
}

model GoalUpdate {
  id              String            @id @default(cuid())
  goalId          String
  updateText      String
  progress        Int               // 0-100 percentage
  updatedBy       String
  updatedAt       DateTime          @default(now())

  // Relations
  goal            PerformanceGoal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  updater         User              @relation(fields: [updatedBy], references: [id])

  @@map("goal_updates")
}

model PerformanceReview {
  id              String            @id @default(cuid())
  employeeId      String
  goalId          String?
  cycleId         String
  reviewType      ReviewCycleType
  rating          ReviewRating
  comments        String?
  strengths       String?
  improvements    String?
  status          PerformanceReviewStatus @default(PENDING)
  reviewedBy      String?
  reviewedAt      DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  employee        Employee          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  goal            PerformanceGoal? @relation(fields: [goalId], references: [id])
  cycle           ReviewCycle       @relation(fields: [cycleId], references: [id])
  reviewer        User?             @relation("PerformanceReviewer", fields: [reviewedBy], references: [id])

  @@map("performance_reviews")
}

model ReviewCycle {
  id              String            @id @default(cuid())
  name            String
  type            ReviewCycleType
  startDate       DateTime
  endDate         DateTime
  status          CycleStatus       @default(ACTIVE)
  createdBy       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  creator         User              @relation("ReviewCycleCreator", fields: [createdBy], references: [id])
  reviews         PerformanceReview[]

  @@map("review_cycles")
}

// Performance Management Enums
enum GoalCategory {
  PERFORMANCE
  DEVELOPMENT
  BEHAVIORAL
  PROJECT
  SKILL
  OTHER
}

enum GoalPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum ReviewCycleType {
  MID_YEAR
  ANNUAL
  QUARTERLY
  PROJECT_BASED
}

enum ReviewRating {
  EXCEEDS_EXPECTATIONS
  MEETS_EXPECTATIONS
  BELOW_EXPECTATIONS
  NEEDS_IMPROVEMENT
}

enum PerformanceReviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CycleStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  DRAFT
}

// Employee Self Service Models
model EmployeeRequest {
  id          String   @id @default(cuid())
  employeeId  String
  category    RequestCategory
  title       String   @db.VarChar(255)
  description String   @db.Text
  status      RequestStatus @default(OPEN)
  assignedTo  String?  // FK to User (manager/admin)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  assignedUser User?   @relation("RequestAssignee", fields: [assignedTo], references: [id])
  comments    RequestComment[]

  @@map("employee_requests")
}

model RequestComment {
  id        String   @id @default(cuid())
  requestId String
  authorId  String   // FK to User (employee or manager)
  comment   String   @db.Text
  createdAt DateTime @default(now())

  // Relations
  request   EmployeeRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("request_comments")
}

enum RequestCategory {
  QUERY
  IT_SUPPORT
  PAYROLL
  GENERAL
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  WAITING_INFO
  RESOLVED
  CLOSED
}
